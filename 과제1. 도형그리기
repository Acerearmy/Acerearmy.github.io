24.01
도형그리기

목표 : 반복문과 * 을 사용해서 다양한 도형을 그린다.

요구사항
● 높이는 사용자로부터 입력 받는다
● 입력 받은 높이만큼의 도형을 출력한다
● 도형은 * 문자로 그린다
● 도형의 종류는 다음과 같다
- 정사각형
- 왼쪽 정렬된 직각삼각형
- 오른쪽 정렬된 직각삼각형
- 정삼각형

예시 1 : 높이가 5인 정사각형

*****
*****
*****
*****
*****

예시 2 : 높이가 5인 왼쪽 정렬된 직각삼각형

*
**
***
****
*****

예시 3 : 높이가 5인 오른쪽 정렬된 직각삼각형

    *
   **
  ***
 ****
*****

예시 4 : 높이가 5인 정삼각형

    *
   ***
  *****
 *******
*********

첫 시간인 Basic부분에서 배웠던 입,출력, 반복문, 조건문 등을 사용해서 풀어내는 과제였다.
code :
import java.util.Scanner; // Scanner를 import해준다. 이거 안해주면 작동하지 않는다.

public class makeStar {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); // 타자를 입력받을 Scanner의 변수sc를 만들어준다.
        int height = sc.nextInt(); //정수를 입력받을 int변수 height를 만들어줬다.
        for (int i = 0; i < height; i++) {  //2중for문 첫번째는 가로
            for (int j = 0; j < height; j++) { //두번째는 세로를 나타내는 것으로 높이가 5라면 5x5
                                               //인 면에서 무엇을 할 것인가를 만들기 위한 선행조건이다.
                System.out.print("*"); // 25개의 면 전부에 *을 찍어줄 것이다.
            } // 이때 공부하면서 처음 알았는데 println에서 뒤 ln은 \n과 같은 효과로, 출력후에 한줄 바꿔주는 것이었다.
              // *을 출력하는 부분에서 println을 사용하면 그냥 * 25개를 세로 일직선으로 출력하게되니 ln을 빼고 사용할것!
            System.out.println(); // 두번째  for문을 한바퀴 돌아 *을 입력받은만큼 찍었다면 그 다음줄부터 다시 찍어야 하니 첫번째for에서 한줄 띄어준다.

        }
        System.out.println();
        // 테스트 결과 예시1과 같이 *로 만들어진 정사각형이 출력되는것을 알 수 있다.

        for (int i = 0; i < height; i++) {
            for (int j = 0; j <=i; j++) {//왼쪽정렬된 직사각형의 경우엔 두번째for문이 조금 다르다. 첫번째 줄엔 하나, 두번째줄엔 둘....
                                         //이런식으로 출력이 되야하므로 j<=i로 바꿔주면 줄이 바뀔때마다 *이 하나씩 늘어나게 만들어줄 수 있다.
                System.out.print("*"); //j<i로 조건을 작성하면 첫번째 j구간에서 만족하는 부분이 없어 아무것도 출력되지 않기때문에 조건을 설정할때 주의할것!
            }
            System.out.println();
        }
        System.out.println();
        //테스트 결과 예시2와 같이 왼쪽 정렬된 삼각형이 출력되는것을 알 수 있다.

        for (int i = 0; i < height; i++) {
            for (int j = 0; j < height; j++) {
                //왼쪽부터 출력할때는 한줄에 몇개를 출력할 것인가만 고려하면 되는 문제여서 아주 간단했는데 이번에는 오른쪽부터 출력하는것이라 공백(" ")을 
                //입력하는것도 신경써줘야한다. 이 부분에서 사용되는것은 조건문의 if와else
                if(j<height-i-1){ //j가 높이(5)에서i와1을 빼준것보다 작을때는 공백을 출력하게 한다.
                    System.out.print(" ");
                }  //첫번째줄의 경우에는 1~4까지는 공백이 5는 *이 찍히게된다.
                   //i가 한번돌아서 1이 된경우에는 1~3까지는 공백이, 4와5는 *이 찍히게된다''''
                else{
                    System.out.print("*");
                } //처음에 조건을 j<height-i로 했었는데 예시2번과 마찬가지로 첫번재 줄에 아무것도 출력되지 않은 4줄짜리 삼각형이 되버렸다... 
            }
            System.out.println();
        }
        System.out.println();
        //테스트 결과 예시3과 같이 오른쪽 정렬된 삼각형이 출력되는것을 알 수 있다.


예시 4번의 경우 그림을 보면 1,3,5,7,9....순서로 규칙적으로 늘어나는 것을 볼 수 있다.
이때 규칙성을 보자면 n(번째줄)*2-1로, 마지막줄은 height*2-1이 된다(예시도 5*2-1=9로 별이9개인 것을 볼 수 있음).
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < height*2-1; j++) {
                if(height-i-1<=j&&j<=height+i-1){ //가운데부터 *을 찍으며 i가 1씩 증가할수록(줄이 바뀔수록) 좌우로 *이 하나씩 증가하는 조건
                    System.out.print("*");
                } else{
                    System.out.print(" "); 
                }
            } // 즉 높이가 5일때 마지막줄의 별 갯수는 9개가 되니 5x9의 정사각형을 만들어서 공백과 *로 채워줄수 있도록 조건문을 작성한 것이다.
            System.out.println();
            //예시4번과 같이 피라미드형 삼각형이 문제없이 출력되었다.
        }
    }
}

첫번재 시간에 공부한 것을 토대로 반복문이나 조건문을 사용하며 어디서 어디까지 반복할 것인가? 조건문을 사용한다면
어떤식으로 조건을 만들어서 문제를 해결할 것인가?를 생각해 볼 수 있는 좋은 문제였다고 생각한다.