24.01
IntelliJ IDEA를 설치 및 기본세팅 후 기본적인 JAVA사용법에 대해 배웠다.

프로그래밍 기본 개념

프로그램과 프로그래밍이란?
● 프로그램은 메뉴얼처럼 컴퓨터에게 특정 작업을 수행하도록 지시하는 명령어들의 집합이다
● 프로그래밍이란 컴퓨터에게 원하는 작업을 정확하고 효율적으로 수행하도록 지시하는 일련의 명령어들을 만드는 과정이다
● 프로그래밍을 통해 우리는 컴퓨터에게 원하는 작업을 정확하고 효율적으로 수행하도록 할 수 있다
● 프로그래밍 언어란 컴퓨터가 이해할 수 있는 언어로, 프로그램을 작성하는 데에 사용된다

변수(Variable)

● 변하는 값
● 변수는 데이터를 저장하고, 필요에 따라 그 값을 변경할 수 있는 공간을 의미한다
● Java에서 변수를 사용하기 위해서는 먼저 변수의 타입을 선언해야 한다
● 변수의 타입은 크게 기본형/참조형 두 가지로 구분된다.

● 기본형
- boolean, char, byte, short, int, long, float, double
- 실제 값을 저장

● 참조형
- 기본형을 제외한 나머지 (String, System 등)
- 객체의 주소를 저장 (4 byte)

변수 생성 규칙
● 변수의 이름은 영문자, 숫자, $, _로 구성된다
● 변수의 이름은 숫자로 시작할 수 없다
● 공백을 포함할 수 없다
● 변수의 이름으로 자바 예약어를 사용할 수 없다
    ex) int, double, public, class 등
변수의 종류
● 변수는 타입에 따라 크게 기본형(primitive type) 변수와 참조형(reference type) 변수로 구분된다.
● 기본형 변수는 실제 값을 저장하고, 참조형 변수는 객체의 주소를 저장한다.

1.boolean TorF 1byte / True 혹은 False로 반환되는 값
2.char 문자 2byte / 모든 유니코드 문자를 받을 수 있으면 '한 글자'만
3.byte 정수 1byte / -128 ~ 127까지의 숫자를 받을 수 있다.
4.short 정수 2byte / -32768 ~ 32767까지의 숫자를 받을 수 있다.
5.int 정수 4byte / -2147483648 ~ 2147483467까지의 숫자를 받을 수 있다.  *수업하고 문제 풀면서 얘를 제일 많이 쓴 것 같다.
6.long 정수 8byte / -9223372036854775808 ~ 9223372036854775807까지의 숫자를 받을 수 있다. *int에서 해결안되면 얘를 써보자
7.float 실수 4byte / 3.4E+/-38(7개의 자리수)를 받을 수 있다. * int나 long으로 표현할 수 없는 숫자, 소수까지 표현할 수 있지만 수 자체가 앞에서 뒤로갈수록 정밀도가 떨어진다. 6자리 이후로는 값이 달라질 수도 있다~
8.double 실수 8byte / 1.7E+/-308(15개의 자리수)를 받을 수 있다. *이 녀석도 float과 마찬가지로 뒤로갈수록 정확한 값이 출력되기 어려워진다.(짤리는 부분이 있어서 오차가 생긴다)

상수(Constant)

● 변하지 않는 값
● 변수와 마찬가지로 데이터를 저장할 수 있는 메모리 공간을 의미하지만, 변수와 달리 한 번 저장되면 그 값을 변경할 수 없다
● Java에서는 final 키워드를 사용하여 상수를 선언한다
● 상수는 선언과 동시에 반드시 초기화해야 한다
● 상수에 이름을 붙이는 것은 프로그램의 명확성을 높여준다.
- 예를 들어, 3.14159라는 숫자보다 PI라는 이름을 가진 상수가 훨씬 이해하기 쉽고, 프로그램 내에서 일관성 있게 사용할 수 있다.
● 상수는 크게 '리터럴 상수', '명명된 상수' 둘로 구분된다

리터럴 상수
● 직접 값을 코드에 입력하는 상수.
- 예를 들어, 5, 3.14, "Hello"와 같은 값들이 이에 해당한다.
리터럴 타입 접미사(literal type suffix)
● 자바에서 3.14와 같은 실수형 리터럴을 그대로 사용하면, 해당 리터럴은 실수형 타입 중에서도 double형으로 인식한다
● 하지만 실수형 리터럴 맨 뒤에 F나 f를 추가하면, 자바는 해당 실수형 리터럴을 float형으로 인식한다
  ex) 3.14F, 3.14f

명명된 상수
● final 키워드를 사용하여 선언한 변수.
● 이 상수는 이름을 가지며, 값을 한번만 할당할 수 있다.

명명된 상수의 장점
1.가독성 향상: 코드 내에서 상수의 의미를 쉽게 파악할 수 있다.
2.오류 방지: 같은 값을 여러 번 사용할 때 실수를 줄일 수 있다.
3.유지보수 용이: 상수 값을 변경해야 할 경우 한 곳에서만 변경하면 된다.
● 상수를 사용함으로써 프로그램의 안정성과 유지보수성이 향상되며, 코드의 가독성도 높아진다.

자동 형 변환
● 자동 형 변환은 작은 크기의 자료형이 큰 크기의 자료형으로 변환될 때 일어난다
- 이 과정에서 데이터 손실이 발생하지 않는다
● 자동 형 변환 규칙
  1.byte → short → int → long → float → double
  2.char → int

● 자동 형 변환 예시
  1.byte byteValue = 10;
  int intValue = byteValue; // byte → int

  2.char charValue = '가';
  int intValue = charValue; // char → int

  3.int intValue = 10;
  double doubleValue = intValue; // int → double

  4.int intValue = 10;
  byte byteValue = intValue; // 컴파일 에러

명시적 형 변환
● 명시적 형 변환은 큰 크기의 자료형을 작은 크기의 자료형으로 변환할 때 사용된다
- 이 과정에서 데이터 손실이 발생할 수 있다

● 명시적 형 변환 예시
  1.int intValue = 103029770;
  byte byteValue = (byte) intValue; // int → byte
  2.double doubleValue = 3.14;
  int intValue = (int) doubleValue; // double → int
  3.int intValue = 10;
  char charValue = (char) intValue; // int → char
  4.long longValue = 300;
  int intValue = (int) longValue; // long → int
  5.int intValue = 10;
  byte byteValue = (byte) intValue; // 컴파일 에러가 발생하지 않지만, 데이터 손실이 발생한다

● 형 변환 시 주의사항
1.데이터 손실: 큰 자료형을 작은 자료형으로 변환 시 데이터 손실이 발생할 수 있다
2.부정확한 결과: float나 double 같은 실수형 자료형을 정수형으로 변환하면 소수점 이하가 잘린다

연산자(Operator)

● 특정한 연산을 수행하는 기호를 의미한다
● 연산 순서는 연산자 우선순위에 따라 결정된다
● 자바에서 제공하는 대표적인 연산자는 다음과 같다

1.산술 연산자(arithmetic operator) :
  우리가 아는 그거. 수학적 연산에 사용되는거. +,-,*,/,%(%앞의 숫자를 %뒤의 숫자로 나눈 나머지를 반환하는 연산자)
  문자열도 똑같이 가능하다.
  ex)
  String firstName = "홍";
  String lastName = "길동";
  String fullName = firstName + lastName;
  System.out.println("전체 이름: " + fullName); // 이런식으로 대입하여 계산하는것이 가능. 다만 + 이외에는 문자열에 사용할 수 없다

2.대입 연산자(assignment operator) :
  값이나 결과를 할당하는 연산자다. 이거도 우리가 잘 아는 그거다. '='. 왼쪽거에 오른쪽 값이나 결과를 넣어주는 녀석.
  복합 대입 연산자라고 해서 '+=','-=','*=','/='등으로 사용하는 방법이 있는데 예를 들어 a+=5라고하면 이것은 a=a+5와 같은 값을 갖는다. 자주 사용하게 되는 녀석이다.

3.증감 연산자(increment and decrement operators)
  값을 하나씩 증감시키는 연산자. 전위연산자는 ++i,--i로 표현하고 후위연산자는 i++,i--로 표현하며 연산을 수행한 후에 값을 반환하냐, 반환 후에 연산을 수행하냐의 차이가 있다.
  ex) int i=0일때 ++i=1이되고 여기에 여기에 i++를 붙이면 i는 1로 출력되지만 출력후에 i=2가 된다.
      이 값에 --i를 하면 1로 출력되고, i--를 하면 1이 출력되고 0이된다. 이녀석도 반복문 등의 자주 사용하여 굉장히 익숙한 연산자다.

4.비교 연산자(comparison operator) :
  두 값이나 변수를 비교하여 True나 False로 반환하는 연산자.
  1.동등연산자(==): 두 값이 같으면 T, 다르면 F를 반환
  2.부등 연산자(!=): 두 값이 다르면 T, 같으면 F를 반환
  3.크기 비교 연산자(>,<,>=,<=) : 수학시간에 배운 그것. 양쪽의 크기를 비교

5.논리 연산자(logical operator) :
  논리연산에 사용되는 연산자로 조건문이나 반복문의 조건에 결합하여 사용된다.
  1. AND(&&) : 모든 조건이 T면 T를 반환, 그 외엔 F 반환
  2. OR(||) : 조건 중 하나라도 T면 T를 반환
  3. NOT(!) : 조건의 값과 반대값을 반환한다(T면 F, F면T)

6.비트 연산자(bitwise operator) :
  정수형 변수에 대한 비트연산에 사용된다.
  1. AND(&) : 두 비트가 1이면 1 반환. a=5(0101),b=3(0011)일때 a&b면 1(0001)
  2. OR(|) : 두 비트 중 하나라도 1이면 1반환. a|b는 7(0111)
  3. XOR(^) : 두 비트가 다르면 1을 반환. a^b=6(0110)
  4. NOT(~) : 모든 비트를 반전한다. ~a=-6(-1010)
  5. 비트 쉬프트(<<,>>,>>>) : 비트를 좌or우로 이동시킨다. a>>1=2(0010)

7.삼항 연산자(ternary operator) :
  조건에 따라 두 값중 하나를 선택하는데 사용되며 구문은 '조건 ? 값1 : 값2'로 조건이T면 1을 F면 2를 반환한다.
  ex) a=5, b=10일때 int max = (a>b) ? a:b; max값은 10이 된다.

8.instanceof 연산자 :
  객체가 특정 클래스의 인스턴스인지를 확인하는 데 사용된다. 이 연산자는 객체의 형 변환 가능성을 검사할 때 유용하다.
  ex)  String str = "Hello";
       boolean result = str instanceof String; 의 값은 True가 나온다.

입력(Input)

JAVA에서의 입력은 일단 Scanner만 알아가도록 하자.
지금은 자주쓰는 정수nextInt, 문자열nextLine, 실수 nextDouble 등 사용법은 전부 익혔다.
이 부분에서 알아가야 할 부분은 문자열 변환으로
  String numberStr = "123";
  int number = Integer.parseInt(numberStr);
Integer.parseInt를 사용하면 문자열로 받은 "123"을 정수로 변환하는것도 가능하다.
Double.parseDouble을 사용해서 소수를 받는 것도 가능

조건문

● 프로그램을 작성할 때 특정 조건에 따라 다른 동작을 수행하게 하는 것이 중요할 수 있다. 이를 위해 사용하는 것이 '조건문'이다.
● 자바에서 사용하는 대표적인 조건문의 형태는 다음과 같다.
  1.if 문
  if (조건식) {
    // 조건식이 참일 때 실행되는 코드}
  
  2.if / else 문
  if (조건식) {
    // 조건식이 참일 때 실행되는 코드} 
    else {// 조건식이 거짓일 때 실행되는 코드}

  3.if / else if / else 문
  if (조건식1) {// 조건식1이 참일 때 실행되는 코드}
  else if (조건식2) {// 조건식2가 참일 때 실행되는 코드}
  else {// 조건식1과 조건식2가 모두 거짓일 때 실행되는 코드}

  4.switch 문
  switch (조건) {
    case 값1:
        // 조건이 값1일 때 실행되는 코드
        break;
    case 값2:
        // 조건이 값2일 때 실행되는 코드
        break;
    case 값3:
        // 조건이 값3일 때 실행되는 코드
        break;
    default:
        // 조건이 어떤 case에도 해당하지 않을 때 실행되는 코드
        break;}
적절한 조건문을 사용하여 문제를 풀 것!

배열

● 배열을 사용하면 훨씬 간단하고 효율적으로 데이터를 관리할 수 있다.
● 배열은 같은 타입의 여러 데이터를 연속적인 공간에 저장하여 관리하는 데이터 구조이다.
● Java에서 배열을 사용하기 위해서는 먼저 배열의 크기와 타입을 정해야 한다.
  1.배열 선언 : 변수 선언과 같이 배열 선언도 타입과 이름으로 선언된다. 변수 선언과 다른 점이라면 배열 선언 시에는 대괄호([])를 사용한다.
ex) 타입[] 배열이름; int[] intArray처럼
  2.배열 초기화 : 배열을 생성하고 초기값을 할당한다. 배열을 생성할 때는 new 연산자를 사용한다. 대괄호 안에는 배열의 크기를 지정한다.
ex) 배열이름 = new 타입[크기]; intArray= new int[10]을 하면 크기10짜리 int배열이 생성된다
  3.배열 사용: 배열의 각 요소는 인덱스를 통해 접근할 수 있다. 인덱스는 0부터 시작한다. 배열의 요소에 접근할 때는 배열 이름 뒤에 대괄호를 사용하고, 인덱스를 지정한다.

반복문

● 반복문이란 특정 코드를 반복적으로 실행할 때 사용된다.
- 예를 들어, 1부터 10까지의 숫자를 출력하거나, 1부터 100까지의 합을 구하는 등의 작업을 반복문을 통해 간단하게 처리할 수 있다.
● Java의 반복문 종류는 다음과 같다.
  1.while 문
  while 문은 주어진 조건이 참인 동안, 코드 블록을 반복 실행한다.
  while (조건) {
    // 반복 실행할 코드}

  2.for 문
  ● 특정 작업을 정해진 횟수만큼 반복하고자 할 때 가장 적합한 반복문은 for 문이다
  ● Java에서 for 문은 초기화, 조건 검사, 반복 후 조정 등 세 부분으로 구성되어 있으며, 이를 통해 코드의 반복 실행을 정교하게 제어할 수 있다
  ● for 문은 주어진 조건이 참인 동안, 코드 블록을 반복 실행한다.
  for (초기화; 조건; 반복 후 조정) {
    // 반복 실행할 코드} *제일 많이썼던 반복문. for(int i =0, i<N, i++)이런식으로 아주 많이 사용했다.

  3.do-while 문
  ● do / while 문은 코드 블록을 먼저 실행한 후, 주어진 조건이 참인 동안 코드 블록을 반복 실행한다.
  ● while 문과 차별화되는 점은 do / while 문은 코드 블록을 먼저 실행한 후 조건을 검사한다는 것이다.
  ● 즉 do / while 문은 코드 블록을 최소한 한 번 이상 실행한다.
  do {
    // 반복 실행할 코드
  } while (조건);

  4.continue / break
  ● continue 문과 break 문은 반복문을 제어하는 데 사용되며, 반복문의 실행 흐름을 조작할 수 있다.
  ● continue 문은 반복문 내에서만 사용되며, 반복문의 나머지 부분을 건너뛰고 다음 반복을 진행한다.
  ● break 문은 반복문 내에서만 사용되며, 반복문을 즉시 종료한다.
  * break를 누락하거나 잘못 사용하면 조건문이 망가질 수 있으니 사용하는데 주의를 기울일것!
  ex)
    continue의 예제
    for (int i = 1; i <= 10; i++) {
    if (i % 2 == 0) {
        continue;  // i가 짝수이면 아래 코드를 실행하지 않고 다음 반복으로 넘어감
    }
    System.out.println(i);}
    
    break의 예제
    int count = 0;
    while (true) {
    if (count == 5) {
        break;  // count가 5가 되면 반복문 종료
    }
    count++;}

  5.이중for문
  ● for 문은 중첩하여 사용할 수도 있다. 이를 '이중 for문'이라고 한다. 이중 for문은 주로 2차원 배열을 다루거나, 복잡한 패턴을 출력할 때 사용된다.
  for (int i = 1; i <= 9; i++) {
    for (int j = 1; j <= 9; j++) {
        System.out.println(i + " * " + j + " = " + (i * j));
        }
    }
  ※for문은 중첩할수록 성능이 떨어지니 너무 많이 쓰지않도록 주의!(3중for문 요런거)
  ※선생님 왈 : 3중for문은 무언가 잘못된/비효울적인 코드임!